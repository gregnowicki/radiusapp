require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ContactsController do

# good reading 
#  http://everydayrails.com/2012/04/07/testing-series-rspec-controllers.html

  
  # @current_user = login_user
  # This should return the minimal set of attributes required to create a valid
  # Contact. As you add validations to Contact, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for(:contact )}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ContactsController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

let(:user) {create(:user)}



context "when logged in with stubbed contacts" do
  before do
    sign_in(user)
    controller.stub(:current_user => user)
  end

  it { should permit( :name, :title, :company, :email, :notes, 
                                goals_attributes: [:title, :due_date, :notes, :contact_id, :_destroy, :id]
                                ) .for(:create) }

context "with stubbed contacts" do
   before do
    #it doesn't matter that the contact is invalid. This i just to verify that it gets passed in 
    @contact = Contact.new()
    user.should_receive(:contacts).and_return([@contact])
  end
  describe "GET index" do
    it "assigns all contacts as @contacts" do
      get :index, {}
      assigns(:contacts).should eq([@contact])
    end
  end

  describe "GET show" do
    it "assigns the requested contact as @contact" do
      user.stub_chain(:contacts, :find).and_return(@contact)
      get :show, {:id => 11}
      assigns(:contact).should eq(@contact)
    end
  end

end

end



  # describe "GET new" do
  #   it "assigns a new contact as @contact" do
  #     get :new, {}, valid_session
  #     assigns(:contact).should be_a_new(Contact)
  #   end
  # end

  # describe "GET edit" do
  #   it "assigns the requested contact as @contact" do
  #     contact = Contact.create! valid_attributes
  #     get :edit, {:id => contact.to_param}, valid_session
  #     assigns(:contact).should eq(contact)
  #   end
  # end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new Contact" do
  #       expect {
  #         post :create, {:contact => valid_attributes}, valid_session
  #       }.to change(Contact, :count).by(1)
  #     end

  #     it "assigns a newly created contact as @contact" do
  #       post :create, {:contact => valid_attributes}, valid_session
  #       assigns(:contact).should be_a(Contact)
  #       assigns(:contact).should be_persisted
  #     end

  #     it "redirects to the created contact" do
  #       post :create, {:contact => valid_attributes}, valid_session
  #       response.should redirect_to(Contact.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved contact as @contact" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Contact.any_instance.stub(:save).and_return(false)
  #       post :create, {:contact => { "name" => "invalid value" }}, valid_session
  #       assigns(:contact).should be_a_new(Contact)
  #     end

  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Contact.any_instance.stub(:save).and_return(false)
  #       post :create, {:contact => { "name" => "invalid value" }}, valid_session
  #       response.should render_template("new")
  #     end
  #   end
  # end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested contact" do
  #       contact = Contact.create! valid_attributes
  #       # Assuming there are no other contacts in the database, this
  #       # specifies that the Contact created on the previous line
  #       # receives the :update_attributes message with whatever params are
  #       # submitted in the request.
  #       Contact.any_instance.should_receive(:update).with({ "name" => "MyString" })
  #       put :update, {:id => contact.to_param, :contact => { "name" => "MyString" }}, valid_session
  #     end

  #     it "assigns the requested contact as @contact" do
  #       contact = Contact.create! valid_attributes
  #       put :update, {:id => contact.to_param, :contact => valid_attributes}, valid_session
  #       assigns(:contact).should eq(contact)
  #     end

  #     it "redirects to the contact" do
  #       contact = Contact.create! valid_attributes
  #       put :update, {:id => contact.to_param, :contact => valid_attributes}, valid_session
  #       response.should redirect_to(contact)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the contact as @contact" do
  #       contact = Contact.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Contact.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => contact.to_param, :contact => { "name" => "invalid value" }}, valid_session
  #       assigns(:contact).should eq(contact)
  #     end

  #     it "re-renders the 'edit' template" do
  #       contact = Contact.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Contact.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => contact.to_param, :contact => { "name" => "invalid value" }}, valid_session
  #       response.should render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy" do
  #   it "destroys the requested contact" do
  #     contact = Contact.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => contact.to_param}, valid_session
  #     }.to change(Contact, :count).by(-1)
  #   end

  #   it "redirects to the contacts list" do
  #     contact = Contact.create! valid_attributes
  #     delete :destroy, {:id => contact.to_param}, valid_session
  #     response.should redirect_to(contacts_url)
  #   end
  # end

end
